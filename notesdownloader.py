import os
import re
import collections
import collections.abc
import pptx
from pptx.util import Pt
from pathlib import Path
import docx


class NotesDownloader():
    def __init__(self) -> None:
        self.prs = pptx.Presentation()
        self.doc = docx.Document()
        self.input_file_path = "paras.txt"
        self.downloads_path = str(os.path.join(Path.home(), "Downloads"))
        self.file_title = ""


    def __generate_title(self):
        with open("paras.txt", "r") as f:
            lines = f.readlines()
            self.file_title = lines[0][12:-1]
            self.file_title = self.file_title.replace(" ", "_")
            self.file_title = re.sub('[^A-Za-z0-9_]+', '', self.file_title)
        f.close()

    def __generate_ppt(self):

        topic_heading_pattern = re.compile(r"^Topic \d+:")
        main_topic = re.compile(r"^Main Topic:\s*(.*)$")

        with open(self.input_file_path, "r") as input_file:
            current_topic = None
            current_content = []

            for line in input_file:
                line = line.strip()
                match = main_topic.search(line)

                if main_topic.match(line):
                    main_title = match.group(1)
                    
                    # self.output_file_path = main_title.replace(" ", "_") + ".pptx"
                    # self.output_file_path = self.downloads_path + '\\' + main_title.replace(" ", "_") + ".pptx"

                    Layout = self.prs.slide_layouts[0] 
                    first_slide = self.prs.slides.add_slide(Layout)
                    first_slide.shapes.title.text = main_title

                    title_shape = first_slide.shapes.title
                    title_shape.text = main_title
                    title_shape.text_frame.paragraphs[0].font.bold = True

                    first_slide.placeholders[1].text = "Notes Generated by KJSCE Team!"

                if topic_heading_pattern.match(line):
                    if current_topic is not None:
                        slide = self.prs.slides.add_slide(self.prs.slide_layouts[1])

                        title = slide.shapes.title
                        title.text = current_topic
                        title.text_frame.paragraphs[0].font.size = Pt(40)
                        title.text_frame.paragraphs[0].runs[0].font.bold = True

                        font = title_shape.text_frame.paragraphs[0].font
                        font.name = 'Cambria'

                        body_shape = slide.shapes.placeholders[1]
                        tf = body_shape.text_frame
                        for bullet_text in current_content:
                            p = tf.add_paragraph()
                            p.text = bullet_text
                            p.level = 0
                            p.font.size = Pt(22)
                            p.font.name = 'Cambria'

                    current_topic = line
                    current_content = []

                else:
                    current_content.append(line)

            slide = self.prs.slides.add_slide(self.prs.slide_layouts[1])

            title = slide.shapes.title
            title.text = current_topic
            title.text_frame.paragraphs[0].runs[0].font.bold = True
            title.text_frame.paragraphs[0].font.size = Pt(40)
            font = title_shape.text_frame.paragraphs[0].font
            font.name = 'Cambria'

            body_shape = slide.shapes.placeholders[1]
            tf = body_shape.text_frame
            for bullet_text in current_content:
                p = tf.add_paragraph()
                p.text = bullet_text
                p.level = 0
                p.font.size = Pt(22)
                p.font.name='Cambria'

    def __generate_docx(self) -> None:
        with open("paras.txt", "r") as f:
            lines = f.readlines()
        
        for line in lines:

            if line.startswith("Main Topic"):
                self.file_title = line[12:-1]
                self.file_title = self.file_title.replace(" ", "_")
                self.file_title = re.sub('[^A-Za-z0-9_]+', '', self.file_title)

            if line.startswith("Topic") or line.startswith("Main Topic"):
                self.doc.add_heading(line.strip(), level=1).underline = True
            else:
                self.doc.add_paragraph(line.strip())
        
        print(self.file_title)


    def download_ppt(self) -> bool:
        self.__generate_title()
        self.__generate_ppt()
        self.prs.save(self.downloads_path + f"\\{self.file_title}" + ".pptx")
        return True
    
    def download_docx(self) -> bool:
        self.__generate_title()
        self.__generate_docx()
        self.doc.save(self.downloads_path + f"\\{self.file_title}" + ".docx")
        return True


if __name__ == "__main__":
    ppt = NotesDownloader()

    ppt.download_docx()